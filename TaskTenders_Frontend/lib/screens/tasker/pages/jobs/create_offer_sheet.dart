import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:tasktender_frontend/models/bids.model.dart';
import 'package:tasktender_frontend/models/job.model.dart';
import 'package:tasktender_frontend/services/job.service.dart';
import 'package:tasktender_frontend/services/locator.service.dart';
import 'package:tasktender_frontend/services/user.service.dart';
import 'package:tasktender_frontend/widgets/main_button.dart';

class CreateOfferSheet extends StatefulWidget {
  final Job job;

  const CreateOfferSheet({
    super.key,
    required this.job,
  });

  @override
  State<CreateOfferSheet> createState() => _CreateBidScreenState();
}

class _CreateBidScreenState extends State<CreateOfferSheet> {
  final UserService _userService = locator<UserService>();
  final JobService _jobService = locator<JobService>();
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _bidAmountController;
  late TextEditingController _coverLetterController;

  List<Bid> bids = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _bidAmountController = TextEditingController();
    _coverLetterController = TextEditingController();
    _jobService.getUserBidsByJobId(widget.job.id!).then((value) {
      setState(() {
        value.sort((a, b) => b.bidDate.compareTo(a.bidDate));
        bids = value;
        isLoading = false;
      });
    });
  }

  @override
  void dispose() {
    _bidAmountController.dispose();
    _coverLetterController.dispose();
    super.dispose();
  }

  Bid? getLastUserBid() {
    final userBids =
        bids.where((bid) => bid.taskerId == _userService.getUserUid());
    if (userBids.isEmpty) {
      return null;
    }
    return userBids.first;
  }

  Bid? getLowestBid() {
    if (bids.isEmpty) {
      return null;
    }
    final Bid lowestBid =
        bids.reduce((a, b) => a.bidAmount < b.bidAmount ? a : b);
    return lowestBid;
  }

  void _submitBid() {
    if (_formKey.currentState!.validate()) {
      double bidAmount = 0.0;
      if (widget.job.jobType == 'tender') {
        bidAmount = double.parse(_bidAmountController.text);
      } else if (widget.job.jobType == 'regular') {
        bidAmount = widget.job.price;
      }

      // Create Bid object
      final bid = Bid(
        id: null, // Will be generated by backend
        jobId: widget.job.id!,
        taskerId: _userService.getUserUid(),
        userName: _userService.getUserName(),
        bidAmount: bidAmount,
        coverLetter: _coverLetterController.text,
        rating: _userService.userDetails?.overAllRating ??
            0.0, // Default value, will be updated later
        isAccepted: false, // Default value, will be updated later
        completedProjects: _userService.userDetails?.completedJobs ??
            0, // Default value, will be updated later
        bidDate: DateTime.now(),
      );

      showDialog<String>(
          context: context,
          builder: (BuildContext context) => AlertDialog(
                title: Text("Apply for Job"),
                content: Text("Are you sure you want to apply for this job?"),
                actions: [
                  TextButton(
                    child: Text("Cancel"),
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                  ),
                  TextButton(
                    child: Text("Apply"),
                    onPressed: () {
                      _jobService.addOfferOnJob(bid).then((value) {
                        Navigator.of(context).pop();
                        Navigator.pop(context, true);
                      });
                    },
                  ),
                ],
              ));

      // TODO: Implement bid submission logic (e.g., API call)
      // Navigator.pop(context, bid);
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(SnackBar(content: Text('Bid submitted successfully!')));
    }
  }

  double get _maxBidAllowed => widget.job.price - 1;

  @override
  Widget build(BuildContext context) {
    return SafeArea(
        child: SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Job Details Preview
              if (widget.job.jobType == 'tender')
                _buildBidInfoCard()
              else if (bids.isNotEmpty)
                _buildOfferInfoCard(),
              SizedBox(height: 16),
              Text(
                widget.job.title,
                style: TextStyle(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 8),
              if (widget.job.jobType == 'tender') ...[
                Text(
                  'Job Budget: \$${widget.job.price.toStringAsFixed(2)}',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.green[700],
                  ),
                ),
                SizedBox(height: 16),
                TextFormField(
                  controller: _bidAmountController,
                  decoration: InputDecoration(
                    labelText: widget.job.jobType == 'tender'
                        ? 'Offer Amount'
                        : 'Proposed Price',
                    prefixText: '\$',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.all(Radius.circular(15))),
                    helperText: ' ',
                  ),
                  keyboardType: TextInputType.numberWithOptions(decimal: true),
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(
                        RegExp(r'^\d+\.?\d{0,2}')),
                  ],
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a ${widget.job.jobType == 'tender' ? 'bid' : 'propose'} amount';
                    }
                    final bidAmount = double.tryParse(value);
                    if (bidAmount == null || bidAmount <= 0) {
                      return 'Please enter a valid ${widget.job.jobType == 'tender' ? 'bid' : 'propose'} amount';
                    }
                    if (bidAmount > _maxBidAllowed) {
                      return '${widget.job.jobType == 'tender' ? 'bid' : 'propose'} amount is higher than job budget';
                    }
                    return null;
                  },
                ),
              ],
              SizedBox(height: 16),

              // Cover Letter Input
              TextFormField(
                controller: _coverLetterController,
                decoration: InputDecoration(
                  labelText: 'Cover Letter',
                  alignLabelWithHint: true,
                  hintText: 'Why are you the best fit for this job?',
                  helperText: ' ',
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(15))),
                ),
                maxLines: 4,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please provide a cover letter';
                  }
                  if (value.length < 50) {
                    return 'Cover letter should be at least 50 characters';
                  }
                  return null;
                },
              ),
              SizedBox(height: 24),

              // Submit Bid Button
              MainButton(
                  context: context,
                  onPressed: () {
                    _submitBid();
                  },
                  text: 'Submit'),
            ],
          ),
        ),
      ),
    ));
  }

  Widget _buildOfferInfoCard() {
    return Card(
        elevation: 2,
        child: Padding(
            padding: const EdgeInsets.all(12.0),
            child: Text(
                'You have already submitted an offer for this job. You can only submit one offer per job.')));
  }

  // Bid Information Card
  Widget _buildBidInfoCard() {
    final Bid? lowestBid = getLowestBid();
    final Bid? lastBid = getLastUserBid();

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Highest Bid

            _buildBidInfoRow(
                'Lowest Offer',
                lowestBid != null
                    ? '\$${lowestBid.bidAmount.toStringAsFixed(2)}'
                    : 'No bids yet'),
            SizedBox(height: 8),

            // User's Last Bid
            _buildBidInfoRow(
                'Your Last Offer',
                isLoading
                    ? 'Loading...'
                    : lastBid != null
                        ? '\$${lastBid.bidAmount.toStringAsFixed(2)}'
                        : 'No previous Offer'),
            SizedBox(height: 8),

            // Max Bid Allowed
            _buildBidInfoRow('Max Allowed Offer Amount',
                '\$${widget.job.price.toStringAsFixed(2)}'),
          ],
        ),
      ),
    );
  }

  // Helper method to create consistent bid info rows
  Widget _buildBidInfoRow(String label, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
        Text(
          value,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: Theme.of(context).colorScheme.secondary,
          ),
        ),
      ],
    );
  }
}
